<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.softmotions.ncms.asm.PageSecurityService">

    <select id="selectNavPagePath" resultType="string" parameterType="map">
        SELECT
            NAV_CACHED_PATH
        FROM asms
        WHERE id = #{pid}
    </select>

    <select id="newAclId"
            databaseId="H2"
            resultType="long">
        CALL NEXT VALUE FOR SEQ_ACL_ID
    </select>

    <select id="newAclId"
            databaseId="DB2"
            resultType="long">
        SELECT
            NEXT VALUE FOR SEQ_ACL_ID
        FROM SYSIBM.DUAL
    </select>

    <select id="selectPageAclInfo" resultType="map" parameterType="map">
        SELECT
            owner            AS "owner",
            local_acl_id     AS "local_acl",
            recursive_acl_id AS "recursive_acl"
        FROM ASMS
        WHERE id = #{pid}
    </select>

    <select id="selectUserRightsByAcl" resultType="string" parameterType="map">
        SELECT
            rights
        FROM ASM_ACL_ENTITY
        WHERE "USER" = #{user} AND acl_id = #{acl}
    </select>

    <select id="selectUserRightsForPage" resultType="string" parameterType="map">
        SELECT
            acl.rights
        FROM ASM_ACL_ENTITY AS acl
            INNER JOIN ASMS AS a ON acl.acl_id = a.local_acl_id OR acl.acl_id = a.recursive_acl_id
        WHERE acl.user = #{user} AND a.id = #{pid}
    </select>

    <update id="setLocalAcl" parameterType="map">
        UPDATE ASMS
        SET local_acl_id = #{acl}
        WHERE id = #{pid}
    </update>

    <select id="getLocalAcl" resultType="long" parameterType="map">
        SELECT
            local_acl_id
        FROM ASMS
        WHERE id = #{pid}
    </select>

    <update id="setRecursiveAcl" parameterType="map">
        UPDATE ASMS
        SET recursive_acl_id = #{acl}
        WHERE id = #{pid}
    </update>

    <select id="getRecursiveAcl" resultType="long" parameterType="map">
        SELECT
            recursive_acl_id
        FROM ASMS
        WHERE id = #{pid}
    </select>

    <select id="selectAllUserRights" resultType="map" parameterType="map">
        SELECT
            0        AS "recursive",
            "USER"   AS "user",
            rights   AS "rights"
        FROM ASM_ACL_ENTITY
        WHERE acl_id = (SELECT
                            local_acl_id
                        FROM asms
                        WHERE id = #{pid})
        UNION
        SELECT
            1        AS "recursive",
            "USER"   AS "user",
            rights   AS "rights"
        FROM ASM_ACL_ENTITY
        WHERE acl_id = (SELECT
                            recursive_acl_id
                        FROM asms
                        WHERE id = #{pid})
    </select>

    <select id="selectRecursiveUserRights" resultType="map" parameterType="map">
        SELECT
        acl.user AS "user",
        acl.rights AS "rights"
        FROM ASM_ACL_ENTITY AS acl
        INNER JOIN ASMS AS a ON acl.acl_id = a.recursive_acl_id
        WHERE a.id = #{pid}
        <if test="user != null">AND acl.user = #{user}</if>
    </select>

    <select id="selectLocalUserRights" resultType="map" parameterType="map">
        SELECT
        acl.user AS "user",
        acl.rights AS "rights"
        FROM ASM_ACL_ENTITY AS acl
        INNER JOIN ASMS AS a ON acl.acl_id = a.local_acl_id
        WHERE a.id = #{pid}
        <if test="user != null">AND acl.user = #{user}</if>
    </select>

    <select id="checkUserAccess" resultType="int" parameterType="map">
        SELECT
            COUNT(acl.acl_id)
        FROM ASM_ACL_ENTITY AS acl
            INNER JOIN ASMS AS a ON a.recursive_acl_id = acl.acl_id OR a.local_acl_id = acl.acl_id
        WHERE a.id = #{pid} AND acl.user = #{user} AND acl.rights LIKE '%' || #{right} || '%'
    </select>

    <update id="updateAclUserRights"
            databaseId="H2"
            parameterType="map">
        MERGE INTO ASM_ACL_ENTITY (acl_id, user, rights)
        KEY (acl_id, user)
        VALUES (#{acl}, #{user}, #{rights})
    </update>

    <update id="updateAclUserRights"
            databaseId="DB2"
            parameterType="map">
        MERGE INTO ASM_ACL_ENTITY a
        USING (
                  VALUES (#{acl}, #{user}, #{rights})
              ) AS s(acl_id, user, rights)
        ON a.acl_id = s.acl_id AND a.user = s.user
        WHEN MATCHED THEN
        UPDATE SET
            a.rights = s.rights
        WHEN NOT MATCHED THEN
        INSERT (acl_id, user, rights)
        VALUES (s.acl_id, s.user, s.rights)
    </update>

    <update id="deleteAclUser" parameterType="map">
        DELETE FROM ASM_ACL_ENTITY
        WHERE "USER" = #{user} AND acl_id = #{acl}
    </update>

    <update id="copyAcl" parameterType="map">
        INSERT INTO ASM_ACL_ENTITY (acl_id, user, rights)
            SELECT
                #{new_acl},
                "USER",
                rights
            FROM ASM_ACL_ENTITY
            WHERE acl_id = #{prev_acl}
    </update>

    <update id="updateChildRecursiveAcl" parameterType="map">
        UPDATE ASMS
        SET recursive_acl_id = #{new_acl}
        WHERE
        (
        <if test="prev_acl != null">recursive_acl_id = #{prev_acl} OR</if>
        recursive_acl_id IS NULL)
        AND
        (nav_cached_path LIKE #{nav_path}<if test="pid != null">OR id = #{pid}</if>)
    </update>

    <update id="updateChildRecursiveAcl2"
            databaseId="H2"
            parameterType="map">
        MERGE INTO ASM_ACL_ENTITY (acl_id, user, rights)
        KEY (acl_id, user)
        SELECT
            recursive_acl_id,
            #{user},
            #{rights}
        FROM ASMS
        WHERE
            (recursive_acl_id IS NOT NULL AND recursive_acl_id != #{acl})
            AND nav_cached_path LIKE #{nav_path}
    </update>

    <update id="updateChildRecursiveAcl2"
            databaseId="DB2"
            parameterType="map">
        MERGE INTO ASM_ACL_ENTITY a
        USING (
                  SELECT
                      recursive_acl_id,
                      #{user}   AS "user",
                      #{rights} AS "rights"
                  FROM asms
                  WHERE
                      (recursive_acl_id IS NOT NULL AND recursive_acl_id != #{acl})
                      AND nav_cached_path LIKE #{nav_path}
              ) AS s
        ON a.acl_id = s.recursive_acl_id AND a.user = s.user
        WHEN MATCHED THEN
        UPDATE SET
            a.rights = s.rights
        WHEN NOT MATCHED THEN
        INSERT (acl_id, user, rights)
        VALUES (s.recursive_acl_id, s.user, s.rights)
    </update>

    <select id="childRecursiveAcls" resultType="long" parameterType="map">
        SELECT a.recursive_acl_id
        FROM ASMS AS a
        WHERE
        a.nav_cached_path LIKE #{nav_path}
        <if test="exclude_acl != null">AND a.recursive_acl_id != #{exclude_acl}</if>
        <if test="with_user != null">
            AND EXISTS (SELECT aae.rights FROM ASM_ACL_ENTITY AS aae WHERE aae.acl_id = a.recursive_acl_id AND aae.user
            = #{with_user})
        </if>
    </select>

    <select id="checkUserInParentRecursiveAcl" resultType="int" parameterType="map">
        SELECT
            COUNT(a.id)
        FROM ASMS AS a INNER JOIN ASM_ACL_ENTITY AS acl ON a.recursive_acl_id = acl.acl_id
        WHERE
            acl.user = #{user} AND #{nav_path} LIKE (a.nav_cached_path || a.id || '/%')
    </select>

    <update id="deleteLocalAclUserRecursive" parameterType="map">
        DELETE FROM ASM_ACL_ENTITY
        WHERE "USER" = #{user}
              AND acl_id
                  IN (SELECT
                          local_acl_id
                      FROM ASMS
                      WHERE nav_cached_path LIKE #{nav_path} OR id = #{pid})
    </update>

    <select id="accessibleAsmsForRoles" resultType="long" parameterType="long">
        SELECT DISTINCT asm.id
        FROM ASMS AS asm
        <where>
            <if test="template != null">
                AND asm.template = #{template}
            </if>
            <if test="roles != null">
            AND (
                <trim prefixOverrides="AND | OR">
                <if test="roles.length > 0">
                    EXISTS (
                        SELECT r.asm_id FROM ASM_ACCESS_ROLES AS r
                        WHERE
                            r.asm_id = asm.id
                            AND r.role_name IN
                            <foreach collection="roles" item="role" open="(" close=")" separator=",">
                                #{role}
                            </foreach>
                    )
                </if>
                    OR NOT EXISTS (
                        SELECT r.asm_id FROM ASM_ACCESS_ROLES AS r
                        WHERE r.asm_id = asm.id
                    )
                </trim>
            )
            </if>
        </where>
    </select>

</mapper>