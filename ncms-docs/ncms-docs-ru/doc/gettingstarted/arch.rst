.. _arch:

Введение в nCMS
===============

.. contents::


Основные понятия
----------------

Страница в nCMS это: **данные плюс HTML разметка**.
Совокупность данных страницы можно представить в виде набора атрибутов, где каждый атрибут содержит пару:
**(имя атрибута, значение атрибута)**. Для читателей, знакомых с принципами ООП страницу можно рассматривать
как объект некоторого класса с набором атрибутов и хранимых в них данными.

.. image:: img/ncms_arch1.png

Введем несколько определений, которые в дальнейшем будут использоваться в этой
документации.

.. glossary::

    сборка
    assembly
        Сборка это поименованное множество атрибутов страницы.

    HTTL
        Язык разметки (http://httl.github.io) с помощью которого определяется разметка страниц nCMS.
        HTTL достаточно сильно похож на популярный язык шаблонов
        Apache Velocity. :ref:`Руководство по HTTL разметке в nCMS. <httl>`

    атрибут
    attribute
        Именованный блок данных, принадлежащий сборке. Это может быть простая строка, или
        более сложный объект, например ссылка на другую страницу или файл, список, дерево и т.п.
        Данные атрибута имеют свое представление в HTML коде страницы.

    ядро
    core
        Ядро сборки это :term:`HTTL` разметка для представления данных :term:`сборки <сборка>` в виде HTML
        страницы. Ядро является атрибутом сборки, который интерпретируется nCMS
        для создания результирующего HTML кода страницы.

    шаблон
    template
        Шаблон страницы это :term:`сборка`, которая является базовой(родительской) для страницы
        отображаемой клиентам сайта


`Сборки` могут наследоваться друг от друга, переопределять значения атрибутов родительских сборок,
добавлять новые `атрибуты`. `Сборки` поддерживают множественное наследование. Можно
провести прямую аналогию с наследование классов, где вместо классов
мы рассматриваем объекты классов в виде `сборок (assemblies)`.

Пример
------

Проиллюстрируем сказанное выше на простом примере. Если вы хотите самостоятельно
выполнить шаги, которые будут описаны ниже вам необходимо :ref:`создать новый проект <newproject>`

Пусть большинство страниц нашего сайта имеют следующие общие свойства:

* Заголовок страницы (title)
* Подвал страницы (footer)

Выделим из этого большинства страниц, страницы отображающие один блок контента и объединим
их в единый тип(множество) под названием: `Простая страница`

Страницы типа `Простая страница` содержат `title (заголовок)` и `footer (подвал)` атрибуты, разделяемые
большинством страниц сайта, а также дополнительные атрибуты и свойства:

* Содержимое (content)
* Разметка страницы (:term:`core`)

Редактор сайта, используя графический интерфейс nCMS может создать экземпляр страницы с именем `mypage`,
типом `Простая страница` и уникальным содержимым этой
страницы (`content` :term:`атрибутом <атрибут>`)

.. figure:: img/ncms_arch2.png
    :align: center

    Иерархия наследования сборок для страницы `mypage` типа `Простая страница` (Simple page template)

При обращении к странице `mypage` nCMS получит файл разметки для типа `Простая страница`,
подставит в контекст этой :term:`HTTL` разметки множество атрибутов относящихся к экземпляру
:term:`сборки <сборка>` `mypage` и выполнит генерацию HTML ответа клиенту. В этом примере
описана основная идея, лежащая в nCMS.

Реализуем описанную выше структуры в графическом интерфейсе nCMS

Создаем сборку с именем `base`

.. figure:: img/step1.png

    Новая `base` сборка


.. figure:: img/step2.png

    Новая `base` сборка

Создаем общие для всех страниц атрибуты

.. figure:: img/step3.png

    Создание нового атрибута для `base`


.. figure:: img/step4.png

    Создание нового атрибута `title` для `base`

Аналогичным образом добавляем атрибут `footer`.
В итоге конфигурация `base`:

.. image:: img/step5.png


Создаем новый тип страниц: "Простая страница"

.. figure:: img/step6.png

    :term:`Шаблон <шаблон>` "простая страница"


Файл разметки для типа "Простая страница": `/site/httl/simple_core.httl`

.. code-block:: html

    <html>
    <head>
      <title>${asm('title')}</title>
    </head>
    $!{asm('content')}
    <footer>
      $!{asm('footer')}
    </footer>
    </html>

Здесь мы видим включение в результирующий HTML ответ значений атрибутов `title`, `content`, `footer`.
:ref:`Руководство по HTTL разметке в nCMS. <httl>`


После того, как определены базовые :term:`сборки <сборка>` и :term:`шаблон` страницы, редакторы сайта
могут создавать экземпляры страниц на основе этого шаблона:

.. image:: img/step7.png

Выбираем шаблон страницы

.. figure:: img/step8.png

    Кнопка выбора шаблона


.. image:: img/step9.png

После создания страницы активируется интерфейс редактора
содержимого страницы:

.. figure:: img/step10.png

    Интерфейс редактора содержимого страницы


Нажав на кнопку `Предпросмотр` получаем результат нашей работы


.. figure:: img/step11.png

    Отображение созданной страницы `mypage`


Архитектура платформы
---------------------

Платформа nCMS является веб приложением на базе `Java servlet API 3.1`.
В приложении используется `IoC` контейнер `Google Guice <https://github.com/google/guice>`_.
Для связи с СУБД используется SQL библиотека `MyBatis <http://www.mybatis.org/mybatis-3/>`_.

Архитектура :ref:`проекта nCMS <newproject>` построена так, чтобы разработчик
имел возможность расширять функционал как самой платформы nCMS в контексте проекта,
так и создавать специфичные для проекта модули. Более подробно можно ознакомиться
в разделе :ref:`extending`
















